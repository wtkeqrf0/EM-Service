type User {
  id: ID!
  name: String!
  surname: String!
  patronymic: String
  age: Int!
  gender: String!
  country: String!
}

type FailedFio {
  name: String!
  surname: String!
  patronymic: String
}

input EnrichedFio {
  id: ID!
  name: String
  surname: String
  patronymic: String
  age: Int
  gender: String
  country: String
}

input Filter {
  limit: Int!
  offset: Int!
  order: String
  minAge: Int
  maxAge: Int
}

input Fio {
  name: String!
  surname: String!
  patronymic: String
}

# -------------------------------

input CreateFioRequest {
   FIOs: [Fio!]!
}

type CreateFioResponse {
  failedFIOs: [FailedFio!]!
}

input UpdateEnrichedFioRequest {
  enrichedFio: EnrichedFio!
}

type UpdateEnrichedFioResponse {
  user: User
}

input DeleteEnrichedFioRequest {
  id: Int!
}

type DeleteEnrichedFioResponse {
  user: User
}

type Mutation {
  createFio(req: CreateFioRequest!): CreateFioResponse!
  updateEnrichedFio(req: UpdateEnrichedFioRequest!): UpdateEnrichedFioResponse!
  deleteEnrichedFio(req: DeleteEnrichedFioRequest!): DeleteEnrichedFioResponse!
}

# ---------------------------

input GetEnrichedFioRequest {
  filter: Filter!
}

type GetEnrichedFioResponse {
  users: [User!]!
}

type Query {
  getEnrichedFio(req: GetEnrichedFioRequest!): GetEnrichedFioResponse!
}
