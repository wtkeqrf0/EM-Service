package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/wtkeqrf0/restService/api"
)

// CreateFio is the resolver for the createFIO field.
func (r *mutationResolver) CreateFio(ctx context.Context, fios []*api.Fio) ([]*api.FailedFio, error) {
	fio, err := r.CreateFIO(ctx, api.CreateFIORequest{FIOs: fios})
	return fio.FailedFIOs, err
}

// UpdateEnrichedFio is the resolver for the updateEnrichedFIO field.
func (r *mutationResolver) UpdateEnrichedFio(ctx context.Context, enrichedFio api.EnrichedFio) (*api.User, error) {
	req := api.UpdateEnrichedFIORequest{EnrichedFio: enrichedFio}

	if err := req.Validate(); err != nil {
		graphql.AddError(ctx, &gqlerror.Error{
			Err:     err,
			Message: err.Error(),
			Path:    graphql.GetPath(ctx),
		})
		return nil, nil
	}

	user, err := r.UpdateEnrichedFIO(ctx, req)
	return user.User, err
}

// DeleteEnrichedFio is the resolver for the deleteEnrichedFIO field.
func (r *mutationResolver) DeleteEnrichedFio(ctx context.Context, id int) (*api.User, error) {
	req := api.DeleteEnrichedFIORequest{ID: id}

	if err := req.Validate(); err != nil {
		graphql.AddError(ctx, &gqlerror.Error{
			Err:     err,
			Message: err.Error(),
			Path:    graphql.GetPath(ctx),
		})
		return nil, nil
	}

	user, err := r.DeleteEnrichedFIO(ctx, req)
	return user.User, err
}

// GetEnrichedFio is the resolver for the getEnrichedFIO field.
func (r *queryResolver) GetEnrichedFio(ctx context.Context, filter api.Filter) ([]*api.User, error) {
	req := api.GetEnrichedFIORequest{Filter: filter}

	if err := req.Validate(); err != nil {
		graphql.AddError(ctx, &gqlerror.Error{
			Err:     err,
			Message: err.Error(),
			Path:    graphql.GetPath(ctx),
		})
		return nil, nil
	}

	users, err := r.GetEnrichedFIO(ctx, req)
	return users.Users, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
