// Code generated by MockGen. DO NOT EDIT.
// Source: controller/kafka.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	controller "github.com/wtkeqrf0/restService/internal/enricher/controller"
	kafka "github.com/wtkeqrf0/restService/internal/kafka"
	controller0 "github.com/wtkeqrf0/restService/internal/postgres/controller"
	gomock "go.uber.org/mock/gomock"
)

// MockKafka is a mock of Kafka interface.
type MockKafka struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaMockRecorder
}

// MockKafkaMockRecorder is the mock recorder for MockKafka.
type MockKafkaMockRecorder struct {
	mock *MockKafka
}

// NewMockKafka creates a new mock instance.
func NewMockKafka(ctrl *gomock.Controller) *MockKafka {
	mock := &MockKafka{ctrl: ctrl}
	mock.recorder = &MockKafkaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafka) EXPECT() *MockKafkaMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockKafka) Consume(ctx context.Context, db controller0.Postgres, enr controller.Enricher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consume", ctx, db, enr)
}

// Consume indicates an expected call of Consume.
func (mr *MockKafkaMockRecorder) Consume(ctx, db, enr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockKafka)(nil).Consume), ctx, db, enr)
}

// Produce mocks base method.
func (m *MockKafka) Produce(ctx context.Context, fio kafka.FIO, causes map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, fio, causes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockKafkaMockRecorder) Produce(ctx, fio, causes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockKafka)(nil).Produce), ctx, fio, causes)
}
