// Code generated by MockGen. DO NOT EDIT.
// Source: controller/postgres.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	postgres "github.com/wtkeqrf0/restService/internal/postgres"
	ent "github.com/wtkeqrf0/restService/pkg/ent"
	gomock "go.uber.org/mock/gomock"
)

// MockPostgres is a mock of Postgres interface.
type MockPostgres struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresMockRecorder
}

// MockPostgresMockRecorder is the mock recorder for MockPostgres.
type MockPostgresMockRecorder struct {
	mock *MockPostgres
}

// NewMockPostgres creates a new mock instance.
func NewMockPostgres(ctrl *gomock.Controller) *MockPostgres {
	mock := &MockPostgres{ctrl: ctrl}
	mock.recorder = &MockPostgresMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgres) EXPECT() *MockPostgresMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPostgres) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPostgresMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPostgres)(nil).Close))
}

// DeleteUser mocks base method.
func (m *MockPostgres) DeleteUser(ctx context.Context, id int) (*ent.EnrichedFio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(*ent.EnrichedFio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockPostgresMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockPostgres)(nil).DeleteUser), ctx, id)
}

// InitSchema mocks base method.
func (m *MockPostgres) InitSchema(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitSchema", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitSchema indicates an expected call of InitSchema.
func (mr *MockPostgresMockRecorder) InitSchema(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitSchema", reflect.TypeOf((*MockPostgres)(nil).InitSchema), ctx)
}

// SaveUser mocks base method.
func (m *MockPostgres) SaveUser(ctx context.Context, fio postgres.EnrichedFIOWithCreationTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, fio)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockPostgresMockRecorder) SaveUser(ctx, fio interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockPostgres)(nil).SaveUser), ctx, fio)
}

// UpdateUser mocks base method.
func (m *MockPostgres) UpdateUser(ctx context.Context, fio postgres.UpdateEnrichedFIO) (*ent.EnrichedFio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, fio)
	ret0, _ := ret[0].(*ent.EnrichedFio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockPostgresMockRecorder) UpdateUser(ctx, fio interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockPostgres)(nil).UpdateUser), ctx, fio)
}

// Users mocks base method.
func (m *MockPostgres) Users(ctx context.Context, f postgres.Filter) (ent.EnrichedFios, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Users", ctx, f)
	ret0, _ := ret[0].(ent.EnrichedFios)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Users indicates an expected call of Users.
func (mr *MockPostgresMockRecorder) Users(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Users", reflect.TypeOf((*MockPostgres)(nil).Users), ctx, f)
}
