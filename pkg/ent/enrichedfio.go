// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wtkeqrf0/restService/pkg/ent/enrichedfio"
)

// EnrichedFio is the model entity for the EnrichedFio schema.
type EnrichedFio struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Surname holds the value of the "surname" field.
	Surname string `json:"surname,omitempty"`
	// Patronymic holds the value of the "patronymic" field.
	Patronymic *string `json:"patronymic,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Country holds the value of the "country" field.
	Country      string `json:"country,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnrichedFio) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enrichedfio.FieldID, enrichedfio.FieldAge:
			values[i] = new(sql.NullInt64)
		case enrichedfio.FieldName, enrichedfio.FieldSurname, enrichedfio.FieldPatronymic, enrichedfio.FieldGender, enrichedfio.FieldCountry:
			values[i] = new(sql.NullString)
		case enrichedfio.FieldCreateTime, enrichedfio.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnrichedFio fields.
func (ef *EnrichedFio) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enrichedfio.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ef.ID = int(value.Int64)
		case enrichedfio.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ef.CreateTime = value.Time
			}
		case enrichedfio.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ef.UpdateTime = value.Time
			}
		case enrichedfio.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ef.Name = value.String
			}
		case enrichedfio.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				ef.Surname = value.String
			}
		case enrichedfio.FieldPatronymic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patronymic", values[i])
			} else if value.Valid {
				ef.Patronymic = new(string)
				*ef.Patronymic = value.String
			}
		case enrichedfio.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				ef.Age = int(value.Int64)
			}
		case enrichedfio.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				ef.Gender = value.String
			}
		case enrichedfio.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				ef.Country = value.String
			}
		default:
			ef.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EnrichedFio.
// This includes values selected through modifiers, order, etc.
func (ef *EnrichedFio) Value(name string) (ent.Value, error) {
	return ef.selectValues.Get(name)
}

// Update returns a builder for updating this EnrichedFio.
// Note that you need to call EnrichedFio.Unwrap() before calling this method if this EnrichedFio
// was returned from a transaction, and the transaction was committed or rolled back.
func (ef *EnrichedFio) Update() *EnrichedFioUpdateOne {
	return NewEnrichedFioClient(ef.config).UpdateOne(ef)
}

// Unwrap unwraps the EnrichedFio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ef *EnrichedFio) Unwrap() *EnrichedFio {
	_tx, ok := ef.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnrichedFio is not a transactional entity")
	}
	ef.config.driver = _tx.drv
	return ef
}

// String implements the fmt.Stringer.
func (ef *EnrichedFio) String() string {
	var builder strings.Builder
	builder.WriteString("EnrichedFio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ef.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ef.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ef.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ef.Name)
	builder.WriteString(", ")
	builder.WriteString("surname=")
	builder.WriteString(ef.Surname)
	builder.WriteString(", ")
	if v := ef.Patronymic; v != nil {
		builder.WriteString("patronymic=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(fmt.Sprintf("%v", ef.Age))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(ef.Gender)
	builder.WriteString(", ")
	builder.WriteString("country=")
	builder.WriteString(ef.Country)
	builder.WriteByte(')')
	return builder.String()
}

// EnrichedFios is a parsable slice of EnrichedFio.
type EnrichedFios []*EnrichedFio
