// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wtkeqrf0/restService/pkg/ent/enrichedfio"
)

// EnrichedFioCreate is the builder for creating a EnrichedFio entity.
type EnrichedFioCreate struct {
	config
	mutation *EnrichedFioMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (efc *EnrichedFioCreate) SetCreateTime(t time.Time) *EnrichedFioCreate {
	efc.mutation.SetCreateTime(t)
	return efc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (efc *EnrichedFioCreate) SetNillableCreateTime(t *time.Time) *EnrichedFioCreate {
	if t != nil {
		efc.SetCreateTime(*t)
	}
	return efc
}

// SetUpdateTime sets the "update_time" field.
func (efc *EnrichedFioCreate) SetUpdateTime(t time.Time) *EnrichedFioCreate {
	efc.mutation.SetUpdateTime(t)
	return efc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (efc *EnrichedFioCreate) SetNillableUpdateTime(t *time.Time) *EnrichedFioCreate {
	if t != nil {
		efc.SetUpdateTime(*t)
	}
	return efc
}

// SetName sets the "name" field.
func (efc *EnrichedFioCreate) SetName(s string) *EnrichedFioCreate {
	efc.mutation.SetName(s)
	return efc
}

// SetSurname sets the "surname" field.
func (efc *EnrichedFioCreate) SetSurname(s string) *EnrichedFioCreate {
	efc.mutation.SetSurname(s)
	return efc
}

// SetPatronymic sets the "patronymic" field.
func (efc *EnrichedFioCreate) SetPatronymic(s string) *EnrichedFioCreate {
	efc.mutation.SetPatronymic(s)
	return efc
}

// SetNillablePatronymic sets the "patronymic" field if the given value is not nil.
func (efc *EnrichedFioCreate) SetNillablePatronymic(s *string) *EnrichedFioCreate {
	if s != nil {
		efc.SetPatronymic(*s)
	}
	return efc
}

// SetAge sets the "age" field.
func (efc *EnrichedFioCreate) SetAge(i int) *EnrichedFioCreate {
	efc.mutation.SetAge(i)
	return efc
}

// SetGender sets the "gender" field.
func (efc *EnrichedFioCreate) SetGender(s string) *EnrichedFioCreate {
	efc.mutation.SetGender(s)
	return efc
}

// SetCountry sets the "country" field.
func (efc *EnrichedFioCreate) SetCountry(s string) *EnrichedFioCreate {
	efc.mutation.SetCountry(s)
	return efc
}

// Mutation returns the EnrichedFioMutation object of the builder.
func (efc *EnrichedFioCreate) Mutation() *EnrichedFioMutation {
	return efc.mutation
}

// Save creates the EnrichedFio in the database.
func (efc *EnrichedFioCreate) Save(ctx context.Context) (*EnrichedFio, error) {
	efc.defaults()
	return withHooks(ctx, efc.sqlSave, efc.mutation, efc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (efc *EnrichedFioCreate) SaveX(ctx context.Context) *EnrichedFio {
	v, err := efc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (efc *EnrichedFioCreate) Exec(ctx context.Context) error {
	_, err := efc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efc *EnrichedFioCreate) ExecX(ctx context.Context) {
	if err := efc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (efc *EnrichedFioCreate) defaults() {
	if _, ok := efc.mutation.CreateTime(); !ok {
		v := enrichedfio.DefaultCreateTime()
		efc.mutation.SetCreateTime(v)
	}
	if _, ok := efc.mutation.UpdateTime(); !ok {
		v := enrichedfio.DefaultUpdateTime()
		efc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (efc *EnrichedFioCreate) check() error {
	if _, ok := efc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "EnrichedFio.create_time"`)}
	}
	if _, ok := efc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "EnrichedFio.update_time"`)}
	}
	if _, ok := efc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EnrichedFio.name"`)}
	}
	if v, ok := efc.mutation.Name(); ok {
		if err := enrichedfio.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EnrichedFio.name": %w`, err)}
		}
	}
	if _, ok := efc.mutation.Surname(); !ok {
		return &ValidationError{Name: "surname", err: errors.New(`ent: missing required field "EnrichedFio.surname"`)}
	}
	if v, ok := efc.mutation.Surname(); ok {
		if err := enrichedfio.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`ent: validator failed for field "EnrichedFio.surname": %w`, err)}
		}
	}
	if v, ok := efc.mutation.Patronymic(); ok {
		if err := enrichedfio.PatronymicValidator(v); err != nil {
			return &ValidationError{Name: "patronymic", err: fmt.Errorf(`ent: validator failed for field "EnrichedFio.patronymic": %w`, err)}
		}
	}
	if _, ok := efc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "EnrichedFio.age"`)}
	}
	if v, ok := efc.mutation.Age(); ok {
		if err := enrichedfio.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf(`ent: validator failed for field "EnrichedFio.age": %w`, err)}
		}
	}
	if _, ok := efc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "EnrichedFio.gender"`)}
	}
	if v, ok := efc.mutation.Gender(); ok {
		if err := enrichedfio.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "EnrichedFio.gender": %w`, err)}
		}
	}
	if _, ok := efc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "EnrichedFio.country"`)}
	}
	if v, ok := efc.mutation.Country(); ok {
		if err := enrichedfio.CountryValidator(v); err != nil {
			return &ValidationError{Name: "country", err: fmt.Errorf(`ent: validator failed for field "EnrichedFio.country": %w`, err)}
		}
	}
	return nil
}

func (efc *EnrichedFioCreate) sqlSave(ctx context.Context) (*EnrichedFio, error) {
	if err := efc.check(); err != nil {
		return nil, err
	}
	_node, _spec := efc.createSpec()
	if err := sqlgraph.CreateNode(ctx, efc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	efc.mutation.id = &_node.ID
	efc.mutation.done = true
	return _node, nil
}

func (efc *EnrichedFioCreate) createSpec() (*EnrichedFio, *sqlgraph.CreateSpec) {
	var (
		_node = &EnrichedFio{config: efc.config}
		_spec = sqlgraph.NewCreateSpec(enrichedfio.Table, sqlgraph.NewFieldSpec(enrichedfio.FieldID, field.TypeInt))
	)
	if value, ok := efc.mutation.CreateTime(); ok {
		_spec.SetField(enrichedfio.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := efc.mutation.UpdateTime(); ok {
		_spec.SetField(enrichedfio.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := efc.mutation.Name(); ok {
		_spec.SetField(enrichedfio.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := efc.mutation.Surname(); ok {
		_spec.SetField(enrichedfio.FieldSurname, field.TypeString, value)
		_node.Surname = value
	}
	if value, ok := efc.mutation.Patronymic(); ok {
		_spec.SetField(enrichedfio.FieldPatronymic, field.TypeString, value)
		_node.Patronymic = &value
	}
	if value, ok := efc.mutation.Age(); ok {
		_spec.SetField(enrichedfio.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := efc.mutation.Gender(); ok {
		_spec.SetField(enrichedfio.FieldGender, field.TypeString, value)
		_node.Gender = value
	}
	if value, ok := efc.mutation.Country(); ok {
		_spec.SetField(enrichedfio.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	return _node, _spec
}

// EnrichedFioCreateBulk is the builder for creating many EnrichedFio entities in bulk.
type EnrichedFioCreateBulk struct {
	config
	builders []*EnrichedFioCreate
}

// Save creates the EnrichedFio entities in the database.
func (efcb *EnrichedFioCreateBulk) Save(ctx context.Context) ([]*EnrichedFio, error) {
	specs := make([]*sqlgraph.CreateSpec, len(efcb.builders))
	nodes := make([]*EnrichedFio, len(efcb.builders))
	mutators := make([]Mutator, len(efcb.builders))
	for i := range efcb.builders {
		func(i int, root context.Context) {
			builder := efcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnrichedFioMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, efcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, efcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, efcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (efcb *EnrichedFioCreateBulk) SaveX(ctx context.Context) []*EnrichedFio {
	v, err := efcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (efcb *EnrichedFioCreateBulk) Exec(ctx context.Context) error {
	_, err := efcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efcb *EnrichedFioCreateBulk) ExecX(ctx context.Context) {
	if err := efcb.Exec(ctx); err != nil {
		panic(err)
	}
}
