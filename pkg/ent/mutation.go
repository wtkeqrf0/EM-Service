// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/wtkeqrf0/restService/pkg/ent/enrichedfio"
	"github.com/wtkeqrf0/restService/pkg/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEnrichedFio = "EnrichedFio"
)

// EnrichedFioMutation represents an operation that mutates the EnrichedFio nodes in the graph.
type EnrichedFioMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	surname       *string
	patronymic    *string
	age           *int
	addage        *int
	gender        *string
	country       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*EnrichedFio, error)
	predicates    []predicate.EnrichedFio
}

var _ ent.Mutation = (*EnrichedFioMutation)(nil)

// enrichedfioOption allows management of the mutation configuration using functional options.
type enrichedfioOption func(*EnrichedFioMutation)

// newEnrichedFioMutation creates new mutation for the EnrichedFio entity.
func newEnrichedFioMutation(c config, op Op, opts ...enrichedfioOption) *EnrichedFioMutation {
	m := &EnrichedFioMutation{
		config:        c,
		op:            op,
		typ:           TypeEnrichedFio,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEnrichedFioID sets the ID field of the mutation.
func withEnrichedFioID(id int) enrichedfioOption {
	return func(m *EnrichedFioMutation) {
		var (
			err   error
			once  sync.Once
			value *EnrichedFio
		)
		m.oldValue = func(ctx context.Context) (*EnrichedFio, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EnrichedFio.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEnrichedFio sets the old EnrichedFio of the mutation.
func withEnrichedFio(node *EnrichedFio) enrichedfioOption {
	return func(m *EnrichedFioMutation) {
		m.oldValue = func(context.Context) (*EnrichedFio, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EnrichedFioMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EnrichedFioMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EnrichedFioMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EnrichedFioMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EnrichedFio.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *EnrichedFioMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *EnrichedFioMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the EnrichedFio entity.
// If the EnrichedFio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrichedFioMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *EnrichedFioMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *EnrichedFioMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *EnrichedFioMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the EnrichedFio entity.
// If the EnrichedFio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrichedFioMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *EnrichedFioMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *EnrichedFioMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EnrichedFioMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the EnrichedFio entity.
// If the EnrichedFio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrichedFioMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EnrichedFioMutation) ResetName() {
	m.name = nil
}

// SetSurname sets the "surname" field.
func (m *EnrichedFioMutation) SetSurname(s string) {
	m.surname = &s
}

// Surname returns the value of the "surname" field in the mutation.
func (m *EnrichedFioMutation) Surname() (r string, exists bool) {
	v := m.surname
	if v == nil {
		return
	}
	return *v, true
}

// OldSurname returns the old "surname" field's value of the EnrichedFio entity.
// If the EnrichedFio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrichedFioMutation) OldSurname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSurname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSurname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSurname: %w", err)
	}
	return oldValue.Surname, nil
}

// ResetSurname resets all changes to the "surname" field.
func (m *EnrichedFioMutation) ResetSurname() {
	m.surname = nil
}

// SetPatronymic sets the "patronymic" field.
func (m *EnrichedFioMutation) SetPatronymic(s string) {
	m.patronymic = &s
}

// Patronymic returns the value of the "patronymic" field in the mutation.
func (m *EnrichedFioMutation) Patronymic() (r string, exists bool) {
	v := m.patronymic
	if v == nil {
		return
	}
	return *v, true
}

// OldPatronymic returns the old "patronymic" field's value of the EnrichedFio entity.
// If the EnrichedFio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrichedFioMutation) OldPatronymic(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPatronymic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPatronymic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatronymic: %w", err)
	}
	return oldValue.Patronymic, nil
}

// ClearPatronymic clears the value of the "patronymic" field.
func (m *EnrichedFioMutation) ClearPatronymic() {
	m.patronymic = nil
	m.clearedFields[enrichedfio.FieldPatronymic] = struct{}{}
}

// PatronymicCleared returns if the "patronymic" field was cleared in this mutation.
func (m *EnrichedFioMutation) PatronymicCleared() bool {
	_, ok := m.clearedFields[enrichedfio.FieldPatronymic]
	return ok
}

// ResetPatronymic resets all changes to the "patronymic" field.
func (m *EnrichedFioMutation) ResetPatronymic() {
	m.patronymic = nil
	delete(m.clearedFields, enrichedfio.FieldPatronymic)
}

// SetAge sets the "age" field.
func (m *EnrichedFioMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *EnrichedFioMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the EnrichedFio entity.
// If the EnrichedFio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrichedFioMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *EnrichedFioMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *EnrichedFioMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *EnrichedFioMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetGender sets the "gender" field.
func (m *EnrichedFioMutation) SetGender(s string) {
	m.gender = &s
}

// Gender returns the value of the "gender" field in the mutation.
func (m *EnrichedFioMutation) Gender() (r string, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the EnrichedFio entity.
// If the EnrichedFio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrichedFioMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *EnrichedFioMutation) ResetGender() {
	m.gender = nil
}

// SetCountry sets the "country" field.
func (m *EnrichedFioMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *EnrichedFioMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the EnrichedFio entity.
// If the EnrichedFio object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EnrichedFioMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *EnrichedFioMutation) ResetCountry() {
	m.country = nil
}

// Where appends a list predicates to the EnrichedFioMutation builder.
func (m *EnrichedFioMutation) Where(ps ...predicate.EnrichedFio) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EnrichedFioMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EnrichedFioMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EnrichedFio, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EnrichedFioMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EnrichedFioMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EnrichedFio).
func (m *EnrichedFioMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EnrichedFioMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, enrichedfio.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, enrichedfio.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, enrichedfio.FieldName)
	}
	if m.surname != nil {
		fields = append(fields, enrichedfio.FieldSurname)
	}
	if m.patronymic != nil {
		fields = append(fields, enrichedfio.FieldPatronymic)
	}
	if m.age != nil {
		fields = append(fields, enrichedfio.FieldAge)
	}
	if m.gender != nil {
		fields = append(fields, enrichedfio.FieldGender)
	}
	if m.country != nil {
		fields = append(fields, enrichedfio.FieldCountry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EnrichedFioMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case enrichedfio.FieldCreateTime:
		return m.CreateTime()
	case enrichedfio.FieldUpdateTime:
		return m.UpdateTime()
	case enrichedfio.FieldName:
		return m.Name()
	case enrichedfio.FieldSurname:
		return m.Surname()
	case enrichedfio.FieldPatronymic:
		return m.Patronymic()
	case enrichedfio.FieldAge:
		return m.Age()
	case enrichedfio.FieldGender:
		return m.Gender()
	case enrichedfio.FieldCountry:
		return m.Country()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EnrichedFioMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case enrichedfio.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case enrichedfio.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case enrichedfio.FieldName:
		return m.OldName(ctx)
	case enrichedfio.FieldSurname:
		return m.OldSurname(ctx)
	case enrichedfio.FieldPatronymic:
		return m.OldPatronymic(ctx)
	case enrichedfio.FieldAge:
		return m.OldAge(ctx)
	case enrichedfio.FieldGender:
		return m.OldGender(ctx)
	case enrichedfio.FieldCountry:
		return m.OldCountry(ctx)
	}
	return nil, fmt.Errorf("unknown EnrichedFio field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnrichedFioMutation) SetField(name string, value ent.Value) error {
	switch name {
	case enrichedfio.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case enrichedfio.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case enrichedfio.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case enrichedfio.FieldSurname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSurname(v)
		return nil
	case enrichedfio.FieldPatronymic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatronymic(v)
		return nil
	case enrichedfio.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case enrichedfio.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case enrichedfio.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	}
	return fmt.Errorf("unknown EnrichedFio field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EnrichedFioMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, enrichedfio.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EnrichedFioMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case enrichedfio.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EnrichedFioMutation) AddField(name string, value ent.Value) error {
	switch name {
	case enrichedfio.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown EnrichedFio numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EnrichedFioMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(enrichedfio.FieldPatronymic) {
		fields = append(fields, enrichedfio.FieldPatronymic)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EnrichedFioMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EnrichedFioMutation) ClearField(name string) error {
	switch name {
	case enrichedfio.FieldPatronymic:
		m.ClearPatronymic()
		return nil
	}
	return fmt.Errorf("unknown EnrichedFio nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EnrichedFioMutation) ResetField(name string) error {
	switch name {
	case enrichedfio.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case enrichedfio.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case enrichedfio.FieldName:
		m.ResetName()
		return nil
	case enrichedfio.FieldSurname:
		m.ResetSurname()
		return nil
	case enrichedfio.FieldPatronymic:
		m.ResetPatronymic()
		return nil
	case enrichedfio.FieldAge:
		m.ResetAge()
		return nil
	case enrichedfio.FieldGender:
		m.ResetGender()
		return nil
	case enrichedfio.FieldCountry:
		m.ResetCountry()
		return nil
	}
	return fmt.Errorf("unknown EnrichedFio field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EnrichedFioMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EnrichedFioMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EnrichedFioMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EnrichedFioMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EnrichedFioMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EnrichedFioMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EnrichedFioMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown EnrichedFio unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EnrichedFioMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown EnrichedFio edge %s", name)
}
